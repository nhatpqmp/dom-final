import commander from 'commander';
import createApp from './commands/app/create';
import serveApp from './commands/app/serve';
import exportFirestore from './commands/firestore/export';
import importFirestore from './commands/firestore/import';
import seedFirestore from './commands/firestore/seed';
import makeAction from './commands/make/action';
import makeComponent from './commands/make/component';
import makeController from './commands/make/controller';
import makeMiddleware from './commands/make/middleware';
import makePage from './commands/make/page';
import makeReducer from './commands/make/reducer';
import makeRepository from './commands/make/repository';
import makeScript from './commands/make/script';
import makeScriptTag from './commands/make/scriptTag';
import makeTest from './commands/make/test';
import {handleError} from './helpers/error';
import {checkNodeVersion} from './helpers/node';
import {showBanner} from './helpers/string';

// Require to install Node version 10 or higher.
checkNodeVersion('12');

const VERSION = '0.2.1';

// Show banner
showBanner(VERSION);

// Initialize program
const program = new commander.Command();

program.name('Avada');
program.version(VERSION);

// Register all commands
program
  .command('app:create <name>')
  .option('-t, --tag <version>', 'version of skeleton.', 'latest')
  .description('generate a new project')
  .action(handleError(createApp));

program
  .command('app:serve')
  .option(
    '-p, --port <port>',
    'which port do you want to run this application?',
    3000
  )
  .option('-f, --forward <forward>', 'Your firebase port is running', 5000)
  .description('generate a new project')
  .action(serveApp);

program
  .command('firestore:import <fileName>')
  .option('-c, --credentials <credentials>', 'credentials file location')
  .description('import data from json file to Firestore')
  .action(importFirestore);

program
  .command('firestore:export <collection>')
  .option(
    '-f, --file <file>',
    'file name will be export to',
    'firestore_export'
  )
  .option('-c, --credentials <credentials>', 'credentials file location')
  .description('export data from Firestore to json')
  .action(exportFirestore);

program
  .command('firestore:seed')
  .option('-c, --credentials <credentials>', 'credentials file location')
  .option('-t, --target <target>', 'the seed target to run')
  .option('-n, --number <number>', 'the number of data you want to seeds', 1)
  .description('run seeders to generate the testing data')
  .action(seedFirestore);

program
  .command('make:controller <name>')
  .description('generate a controller file with preset')
  .action(makeController);

program
  .command('make:repository <name>')
  .description('generate a repository file with preset')
  .action(makeRepository);

program
  .command('make:middleware <name>')
  .description('generate a middleware file with preset')
  .action(makeMiddleware);

program
  .command('make:component <name>')
  .description('generate a component file for React')
  .action(makeComponent);

program
  .command('make:page <name>')
  .description('generate a page file for React')
  .action(makePage);

program
  .command('make:reducer <name>')
  .description('generate a reducer file for React')
  .action(handleError(makeReducer));

program
  .command('make:action <name>')
  .option('-g, --group <group>', 'A group of the action belongs to')
  .description('generate an action file for React')
  .action(makeAction);

program
  .command('make:script <name>')
  .description('generate a new script file')
  .action(makeScript);

program
  .command('make:scriptTag')
  .description('generate a script tag project')
  .action(makeScriptTag);

program
  .command('make:test <name>')
  .description('generate a new test file')
  .action(makeTest);

program.parse(process.argv);
