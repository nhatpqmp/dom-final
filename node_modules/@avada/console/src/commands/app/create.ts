import {exec} from 'child_process';
import fs from 'fs-extra';
import ora from 'ora';
import path from 'path';
import {promisify} from 'util';

/**
 * Create an application with given name and version of project the developer want
 * @param {string} name
 */
export default async function createApp(name: string) {
  const spinner = ora().start();

  // Validate package name
  spinner.info('Validating your project name');
  const invalidMessage = preCreate(name);
  if (invalidMessage) {
    spinner.fail(invalidMessage);
    return;
  }
  spinner.info(`Creating a new project: ${name}`);

  // Copy directory to destination
  const workingDir = path.resolve(process.cwd(), name);

  // Copy .env to destination
  spinner.start('Copying project template to the current directory');
  await fs.copy(
    path.resolve(__dirname, '../../../storage/template'),
    workingDir
  );
  await fs.copy(
    path.resolve(
      __dirname,
      '../../../storage/template/packages/assets/.env.example'
    ),
    `${workingDir}/packages/assets/.env`
  );
  await fs.copy(
    path.resolve(
      __dirname,
      '../../../storage/template/packages/assets/.env.example'
    ),
    `${workingDir}/packages/assets/.env.production`
  );
  await fs.copy(
    path.resolve(
      __dirname,
      '../../../storage/template/packages/assets/.env.example'
    ),
    `${workingDir}/packages/assets/.env.development`
  );
  await fs.copy(
    path.resolve(__dirname, '../../../storage/template/gitignore'),
    `${workingDir}/.gitignore`
  );
  spinner.info('Copied project template to the current directory');

  spinner.start('Setting up git for project');
  const asyncExec = promisify(exec);
  await asyncExec(
    `git init && git add . && git commit -m "Initialize project" && cp git-hooks/pre-commit .git/hooks/pre-commit && chmod +x .git/hooks/pre-commit`,
    {
      cwd: workingDir
    }
  );
  spinner.info('Set up git for project');

  spinner.start('Installing all dependencies');
  await asyncExec('yarn', {cwd: workingDir});
  spinner.info('Installed all dependencies');

  spinner.succeed(`Congratulations! Create project: ${name} successfully.`);
}

/**
 * Validate package name. Allow only
 * - Lowercase alphanumeric
 * - dash ( - )
 *
 * @param {string} name
 * @return {string}
 */
function preCreate(name: string) {
  // Validate package name
  if (name !== name.toLowerCase()) {
    return 'Project name should contains only lowercase alphanumeric and -';
  }

  // validate directory empty
  const cwd = process.cwd();
  const projectDir = path.join(cwd, name);
  const isExists = fs.existsSync(projectDir);
  if (isExists) {
    return `The directory ${name} is not empty. Please choose another name or remove directory ${name}`;
  }
}
