import {firestore} from 'firebase-admin';
import ora from 'ora';
import path from 'path';
import * as credentials from '../../helpers/credentials';

interface Options {
  credentials?: string;
  target?: string;
  number: string;
}

/**
 * Run seed for generating the testing data
 *
 * @param {object} options
 */
export default async function seedFirestore(options: Options) {
  const spinner = ora().start();
  spinner.start(`Run seeding for Firestore`);
  await credentials.setupCredentials(spinner, options.credentials);
  const num = options.number;
  const cwd = process.cwd();
  const seedConfig = require(path.resolve(cwd, 'seed.config.js'));
  if (options.target && seedConfig[options.target]) {
    await seed(options.target, seedConfig[options.target], parseInt(num, 10));
  } else {
    const seedKeys = Object.keys(seedConfig);
    for (const collection of seedKeys) {
      await seed(collection, seedConfig[collection], parseInt(num, 10));
    }
  }
  spinner.succeed(`Congratulations! Run seeding for Firestore successfully`);
}

/**
 * Run seed to call to Firestore for generating collection data
 * @param {string} collection
 * @param {object} data
 * @param {number} num
 * @return {Promise<void>}
 */
async function seed(collection: string, data: any, num: number) {
  const db = firestore();
  for (let i = 0; i < num; i++) {
    await db.collection(collection).add(data);
  }
}
