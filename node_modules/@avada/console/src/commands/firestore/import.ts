import {firestore} from 'firebase-admin';
import {promises as fs} from 'fs';
import YAML from 'js-yaml';
import ora from 'ora';
import {setupCredentials} from '../../helpers/credentials';

interface Options {
  credentials?: string;
}

/**
 * Import firestore data from a file to live database
 *
 * @param {string} fileName
 * @param {object} options
 * @see https://raw.githubusercontent.com/dalenguyen/firestore-import-export/master/import.js
 */
export default async function importFirestore(
  fileName: string,
  options: Options
) {
  const spinner = ora().start();
  spinner.info(`Importing Firestore from file: ${fileName}`);

  await setupCredentials(spinner, options.credentials);

  try {
    await fs.access(fileName);
  } catch (e) {
    spinner.fail(`File ${fileName} doesn't exist. Please try another file.`);
  }

  try {
    const data = await fs.readFile(fileName, 'utf8');

    let dataArray;
    if (fileName.endsWith('yaml') || fileName.endsWith('yml')) {
      dataArray = YAML.safeLoad(data);
    } else {
      dataArray = JSON.parse(data);
    }

    await updateCollection(dataArray);
    spinner.succeed(`Congratulations! Import ${fileName} successfully!`);
  } catch (e) {
    spinner.fail(e.message);
  }
}

/**
 * Add data to collection
 *
 * @param {Array} dataArray
 * @return {Promise<void>}
 * TODO: Check this method for timestamp and reference data type
 */
async function updateCollection(dataArray: any[]) {
  const db = firestore();
  // tslint:disable-next-line:forin
  for (const index in dataArray) {
    for (const doc in dataArray[index]) {
      if (dataArray[index].hasOwnProperty(doc)) {
        await db
          .collection(index)
          .doc(doc)
          .set(dataArray[index][doc]);
      }
    }
  }
}
