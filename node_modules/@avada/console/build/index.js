"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
var commander_1 = __importDefault(require("commander"));
var create_1 = __importDefault(require("./commands/app/create"));
var serve_1 = __importDefault(require("./commands/app/serve"));
var export_1 = __importDefault(require("./commands/firestore/export"));
var import_1 = __importDefault(require("./commands/firestore/import"));
var seed_1 = __importDefault(require("./commands/firestore/seed"));
var action_1 = __importDefault(require("./commands/make/action"));
var component_1 = __importDefault(require("./commands/make/component"));
var controller_1 = __importDefault(require("./commands/make/controller"));
var middleware_1 = __importDefault(require("./commands/make/middleware"));
var page_1 = __importDefault(require("./commands/make/page"));
var reducer_1 = __importDefault(require("./commands/make/reducer"));
var repository_1 = __importDefault(require("./commands/make/repository"));
var script_1 = __importDefault(require("./commands/make/script"));
var scriptTag_1 = __importDefault(require("./commands/make/scriptTag"));
var test_1 = __importDefault(require("./commands/make/test"));
var error_1 = require("./helpers/error");
var node_1 = require("./helpers/node");
var string_1 = require("./helpers/string");
// Require to install Node version 10 or higher.
node_1.checkNodeVersion('12');
var VERSION = '0.2.1';
// Show banner
string_1.showBanner(VERSION);
// Initialize program
var program = new commander_1["default"].Command();
program.name('Avada');
program.version(VERSION);
// Register all commands
program
    .command('app:create <name>')
    .option('-t, --tag <version>', 'version of skeleton.', 'latest')
    .description('generate a new project')
    .action(error_1.handleError(create_1["default"]));
program
    .command('app:serve')
    .option('-p, --port <port>', 'which port do you want to run this application?', 3000)
    .option('-f, --forward <forward>', 'Your firebase port is running', 5000)
    .description('generate a new project')
    .action(serve_1["default"]);
program
    .command('firestore:import <fileName>')
    .option('-c, --credentials <credentials>', 'credentials file location')
    .description('import data from json file to Firestore')
    .action(import_1["default"]);
program
    .command('firestore:export <collection>')
    .option('-f, --file <file>', 'file name will be export to', 'firestore_export')
    .option('-c, --credentials <credentials>', 'credentials file location')
    .description('export data from Firestore to json')
    .action(export_1["default"]);
program
    .command('firestore:seed')
    .option('-c, --credentials <credentials>', 'credentials file location')
    .option('-t, --target <target>', 'the seed target to run')
    .option('-n, --number <number>', 'the number of data you want to seeds', 1)
    .description('run seeders to generate the testing data')
    .action(seed_1["default"]);
program
    .command('make:controller <name>')
    .description('generate a controller file with preset')
    .action(controller_1["default"]);
program
    .command('make:repository <name>')
    .description('generate a repository file with preset')
    .action(repository_1["default"]);
program
    .command('make:middleware <name>')
    .description('generate a middleware file with preset')
    .action(middleware_1["default"]);
program
    .command('make:component <name>')
    .description('generate a component file for React')
    .action(component_1["default"]);
program
    .command('make:page <name>')
    .description('generate a page file for React')
    .action(page_1["default"]);
program
    .command('make:reducer <name>')
    .description('generate a reducer file for React')
    .action(error_1.handleError(reducer_1["default"]));
program
    .command('make:action <name>')
    .option('-g, --group <group>', 'A group of the action belongs to')
    .description('generate an action file for React')
    .action(action_1["default"]);
program
    .command('make:script <name>')
    .description('generate a new script file')
    .action(script_1["default"]);
program
    .command('make:scriptTag')
    .description('generate a script tag project')
    .action(scriptTag_1["default"]);
program
    .command('make:test <name>')
    .description('generate a new test file')
    .action(test_1["default"]);
program.parse(process.argv);
